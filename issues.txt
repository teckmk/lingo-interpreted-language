// Features
LambdaExpr

fn map<T, U>(mapper: fn(item:T) -> U)

map { item ->
  item.toString()
}

fn outer() {
    fn inner() {
        if(true) return@outer
    }
}

- orphan rule like rust, to prevent conflicts
- Update loop labeling syntax. options:
    - for #lname { break #lname }
    - @lname for { break @lname }
- require type if var is not initialized 

Task List:
- interpret contracts
- default definitions in contracts
- member expressions: obj.prop = "somthing"

- built-in contracts on types:
    - number -> .toString()
    - string -> .split() .join() .match() .find() .findAll() .replace() .trim() etc
- modules (code splitting)
- built-in contracts:
    - Iterable
    - Serializable